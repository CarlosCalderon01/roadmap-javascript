/**
    1. Number:

        The Number objects represents numerical date, either integers or floating-point numbers.
        Number objects are created using the Number() constructor and contains Constants and methods.
        Number() function can convert values of different types to numbers.

        Properties of Number object:
        Properties          Description

        Constructor         The function that created the Number object is returned.
        MAX VALUE           In JavaScript, this method returns the smallest number value possible.
        MIN VALUE           In JavaScript, this method returns the smallest feasible numerical value.
        NEGATIVE INFINITY   Negative infinity's value is represented.
        POSITIVE INFINITY   Represent the value of infinity.
        Prototype           An object's properties and methods can be added.

        Methods of Number object:
        Method()            Description:

        toExponential()     A number is converted to exponential notation.
        toFixed()           Formats a number to the right of the decimal point with a given amount of digits.
        toLocaleString()    Returns a string value version of the current number in a format that varies depending on the locale settings of the browser.
        toPrecision()       Defines how many total digits a number should be displayed with.
        toString()          The string representation of the number's value is returned.
        valueOf()           Returns the value of the number.

    2. BigInt:

        BigInt is a primitive wrapper object for representing and manipulating primitive bigint values that are too large for the number primitive to handle.
        A BigInt objects are created using the BigInt() constructor.
        A BigInt value, sometimes known as just a BigInt, is a bigint primitive that can be generated by appending n to the end of an integer literal or by invoking the BigInt() function Object and passing it an integer or string value.

        Properties of BigInt object:
        Properties      Description

        Constructor     The function that created the BigInt object is returned.
        Prototype       An object's properties and methods can be added.

        Methods of BigInt object:
        Method()            Description

        asIntN()            Clamps and returns a signed integer value from a BigInt value.
        asUintN()           Returns a BigInt value that has been clamped to an unsigned integer value.
        toLocaleString()    This BigInt value is returned as a string with a language-sensitive representation. Overrides the Object.prototype.toLocaleString() method.
        toString()          This BigInt value is represented as a string in the specified radix (base). Overrides the Object.prototype.toString() method.
        valueOf()           Returns this BigInt value.

    3. Math:

        The Math object is used to execute simple and complicated arithmetic operations on Number values. It isn't even a function object.
        A Math objects are created using the Math() constructor.
        There are no constructors on the Math object. All of the Math object's methods and properties are static, meaning they are member functions of the Math object. There is no method to generate a Math object instance.

        Properties of Math object:
        Properties  Description

        PI          Pi's value, approximately 3.14159.
        E           This property is utilized for the natural logarithm e's base, approximately 2.718.
        LN2         The natural logarithm of 2 has this property, approximately 0.693.
        LN10        The Natural logarithm of 10 has this property, approximately 2.303.
        LOG2E       This property is used to calculate the base 2 logarithm of e, approximately 1.443 .
        LOG10E      This property is used to calculate the base 10 logarithm of e, approximately 0.434 .
        SQRT2       This property is used to calculate the square root of 2, approximately 1.414.
        SQRT1_2     This property is used to calculate the square root of ½, approximately 0.707

        Methods of Math object:
        Method()    Description

        max(x,y)    The largest of x and y is returned.
        min(x,y)    The least of x and y is returned.
        round(x)    The nearest integer is returned.
        ceil(x)     Rounds up. The lowest integer greater than or equal to x is returned.
        floor(x)    Rounds down. The greatest integer less than or equal to x is returned.
        exp(x)      Returns e^x, with x being the argument and e being Euler's constant (2.718..., the natural logarithm's base).
        pow(x,y)    Returns x^y
        abs(x)      Returns absolute value of x.
        random()    Returns an integer between 0 and 1 that is pseudo-random.
        sqrt(x)     Returns square root of x.
        sin(x)      Returns sin of x (x is in radians).
        cos(x)      Returns cosine of x (x is in radians).
        tan(x)      Returns tangent of x (x is in radians).
        sinh(x)     Returns the hyperbolic sine of x (x is in radians).
        cosh(x)     Returns the hyperbolic cosine of x (x is in radians).
        tanh(x)     Returns the hyperbolic tangent of x (x is in radians).

    4. Date:

        When users require access to the present date and time, as well as previous and future dates and times. The Date object in JavaScript provides support for working with dates and times.
        A Date objects are created using the Date() constructor.
        The Date object abstracts dates and times in a system-independent way.
        Dates can be compared and converted to a readable string format as well. Millisecond precision is used to indicate a date.

        Properties of Date object:
        Properties      Description

        Constructor     The function that created the Date object is returned.
        Prototype       An object's properties and methods can be added.

        Methods of Date object:
        Method()            Description

        Date()              Returns the current date and time.
        getDate()           The day of the month for the specified date is returned.
        getDay()            The day of the week for the specified date is returned.
        getFullYear()       The year of the specified date is returned.
        getHours()          Returns the hour in local time for the specified date.
        getMinutes()        According to local time, returns the minutes (0–59) in the specified date.
        getSeconds()        According to local time, returns the seconds (0–59) in the specified date.
        getMilliseconds()   According to local time, this function returns the milliseconds in the specified date.

**/

// Crear un objeto Date que representa la fecha y hora actual
const fechaActual = new Date()

// Obtener la fecha y hora actuales
const año = fechaActual.getFullYear()
const mes = fechaActual.getMonth() // Los meses se cuentan desde 0 (enero) hasta 11 (diciembre)
const día = fechaActual.getDate()
const hora = fechaActual.getHours()
const minutos = fechaActual.getMinutes()
const segundos = fechaActual.getSeconds()
const milisegundos = fechaActual.getMilliseconds()

console.log('Fecha actual:', fechaActual)
console.log('Año:', año)
console.log('Mes:', mes + 1) // Sumar 1 para obtener el mes real
console.log('Día:', día)
console.log('Hora:', hora)
console.log('Minutos:', minutos)
console.log('Segundos:', segundos)
console.log('Milisegundos:', milisegundos)

// Obtener el día de la semana (0: domingo, 1: lunes, ..., 6: sábado)
const diaSemana = fechaActual.getDay()
console.log('Día de la semana:', diaSemana)

// Crear un objeto Date para una fecha específica (ejemplo: 1 de enero de 2023)
const fechaEspecifica = new Date(2023, 0, 1) // El mes se especifica desde 0 (enero)
console.log('Fecha específica:', fechaEspecifica)

// Crear un objeto Date a partir de una marca de tiempo (milisegundos desde el 1 de enero de 1970)
const marcaTiempo = 1635686400000 // 1 de noviembre de 2021
const fechaMarcaTiempo = new Date(marcaTiempo)
console.log('Fecha desde marca de tiempo:', fechaMarcaTiempo)

// Formatear una fecha en una cadena legible
const opciones = { year: 'numeric', month: 'long', day: 'numeric' }
const fechaFormateada = fechaActual.toLocaleDateString('es-ES', opciones)
console.log('Fecha formateada:', fechaFormateada)
